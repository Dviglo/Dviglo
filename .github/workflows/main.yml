# Copyright (c) 2008-2022 the Urho3D project
# Copyright (c) 2022-2022 the Dviglo project
# License: MIT

name: CI/CD
on:
  push:
  pull_request:
  repository_dispatch: { types: [ 'Warm DBE build cache' ] }
jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.whatchanged.outputs.skip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: What changed
        id: whatchanged
        run: |
          git fetch --deepen=1
          git log --raw --no-merges -1 |grep '^:' >/tmp/whatchanged
          echo "name=skip::$(grep -cqv 'website/' /tmp/whatchanged; echo $?)" >> $GITHUB_OUTPUT

  windows:
    name: üî≤
    runs-on: windows-2019
    needs: init
    if: needs.init.outputs.skip == '0' && github.event_name != 'repository_dispatch'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - win-vs
          - win-gcc
        lib-type:
          - static
          - shared
        graphics-api:
          - DX11
          - OpenGL
    env:
      HOST: ${{ github.job }}
      PLATFORM: ${{ matrix.platform }}
      LIB_TYPE: ${{ matrix.lib-type }}
      GRAPHICS_API: ${{ matrix.graphics-api }}
      URHO3D_GENERATEBINDINGS: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - name: Install dependencies
        id: install_dependencies
        shell: bash {0} # Allow catching errors
        run: |
          # Server may reject connection, so try several times
          for (( i = 0; i < 4; ++i ))
          do
            choco install --no-progress doxygen.install
            if (( $? == 0 )) # Exit code of the previous command
            then
              break
            else
              echo "========== One more try =========="
              sleep 20
            fi
          done
          for (( i = 0; i < 4; ++i ))
          do
            choco install --no-progress graphviz.portable
            if (( $? == 0 )) # Exit code of the previous command
            then
              break
            else
              echo "========== One more try =========="
              sleep 20
            fi
          done
          # Use MSYS2 instead obsolete MinGW
          # https://github.com/urho3d/Urho3D/issues/2887
          echo "c:\msys64\mingw32\bin" >> $GITHUB_PATH
      - name: CMake
        run: rake cmake
      - name: Build
        shell: bash
        run: |
          rake build

          # If there are changes in repository, then generated bindings are different from existing ones
          cd D:/a/Urho3D/Urho3D
          if [[ `git status --porcelain` ]]; then
            echo "!!!!! ERROR: Generated bindings are different from existing ones"
            exit -1 # Exit from the script with error code
          fi

      - name: Test tools
        shell: bash
        run: D:/a/Urho3D/Urho3D/script/test_tools.sh D:/a/Urho3D/Urho3D D:/a/Urho3D/Urho3D/build/ci
      - name: Test
        run: rake test
        if: matrix.graphics-api != 'OpenGL'
      - name: Documentation
        run: rake doc
      - name: Install
        run: rake install
      - name: Scaffolding - new
        run: rake new
      - name: Scaffolding - build
        run: |
          cd ~/projects/UrhoApp
          rake
      - name: Scaffolding - test
        run: |
          cd ~/projects/UrhoApp
          rake test
        if: matrix.graphics-api != 'OpenGL'
      - name: Scaffolding - cleanup
        run: rm -r -fo ~/.urho3d, ~/Projects
      - name: Package
        run: rake package
        if: github.event_name == 'push'
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-${{ matrix.lib-type }}-64-${{ matrix.graphics-api }}-rel
          path: build/ci/*.zip
        if: github.event_name == 'push'

  Linux_Native:
    runs-on: ubuntu-latest
    needs: init
    if: needs.init.outputs.skip == '0'

    strategy:
      fail-fast: false
      matrix:
        COMPILER:
        - {
            ID: gcc,
            C: gcc,
            CXX: g++,
          }
        - {
            ID: clang,
            C: clang,
            CXX: clang++,
          }
        BITS:
        - 64
        LIB_TYPE:
        - {
            ID: shared,
            VALUE: SHARED,
          }
        - {
            ID: static,
            VALUE: STATIC,
          }
        BUILD_TYPE:
        - {
            ID: rel,
            VALUE: Release,
          }
        - {
            ID: dbg,
            VALUE: Debug,
          }

    name: üêß-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: { path: "engine_repo" }

    - name: Install dependencies
      run: |
        if [ "${{ matrix.BITS }}" == "32" ]; then
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install gcc-multilib g++-multilib libxext-dev:i386 libgl1-mesa-dev:i386
        else
          sudo apt install libgl1-mesa-dev
        fi

        # Ubuntu repository contains obsolete Doxygen 1.9.1. Download own build
        mkdir $HOME/programs
        cd $HOME/programs
        wget -q -O tmp.zip https://github.com/rurho3d/doxygen-builder/raw/main/doxygen_linux64.zip && unzip tmp.zip && rm tmp.zip
        echo "$HOME/programs" >> $GITHUB_PATH

    - name: –°–∫–∞—á–∏–≤–∞–µ–º –∫—ç—à
      uses: actions/cache@v3
      with:
        path: engine_build
        key: linux-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}-${{ github.sha }}
        restore-keys: linux-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
    - name: –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if: |
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[clear cache]')) ||
        (github.event_name == 'push' && contains(join(github.event.commits.*.message, ' '), '[clear cache]'))
      run: |
        rm -rf engine_build

    - name: Build
      run: |
        #set -x # Echo commands
        echo "Current dir: $PWD"

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          BITS64=0
        else
          BITS64=1
        fi

        cmake engine_repo -B engine_build -G "Unix Makefiles" \
          -D CMAKE_C_COMPILER=${{ matrix.COMPILER.C }} -D CMAKE_CXX_COMPILER=${{ matrix.COMPILER.CXX }} \
          -D URHO3D_DATABASE_SQLITE=1 -D URHO3D_TESTING=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }} -D URHO3D_GENERATEBINDINGS=1

        cmake --build engine_build

        # If there are changes in repository, then generated bindings are different from existing ones
        cd engine_repo
        if [[ `git status --porcelain` ]]; then
          echo "!!!!! ERROR: Generated bindings are different from existing ones"
          exit -1 # Exit from the script with error code
        fi
        cd ..

    - name: CTest
      shell: bash {0} # Allow catching errors
      run: |
        xvfb-run ctest --test-dir engine_build
        EXIT_CODE=$? # Exit code of the previous command

        if (( $EXIT_CODE != 0 )) 
        then
          echo "$(cat ~/.local/share/urho3d/logs/HelloWorld.log)"
          exit $EXIT_CODE
        fi

    - name: Test tools
      run: $GITHUB_WORKSPACE/engine_repo/script/test_tools.sh $GITHUB_WORKSPACE/engine_repo $GITHUB_WORKSPACE/engine_build

    - name: Test app
      run: |
        #cmake --install engine_build --prefix=$HOME/installed_engine # Not works
        #URHO3D_HOME=$HOME/installed_engine # Not works (add export?)
        #URHO3D_HOME=$GITHUB_WORKSPACE/engine_build # Not works
        sudo cmake --build engine_build --target install
        cd engine_repo
        rake new
        cd ..

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          BITS64=0
        else
          BITS64=1
        fi

        cmake $HOME/projects/UrhoApp -B $HOME/projects/UrhoApp_build -G "Unix Makefiles" \
          -D CMAKE_C_COMPILER=${{ matrix.COMPILER.C }} -D CMAKE_CXX_COMPILER=${{ matrix.COMPILER.CXX }} \
          -D URHO3D_DATABASE_SQLITE=1 -D URHO3D_TESTING=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build $HOME/projects/UrhoApp_build
        xvfb-run ctest --test-dir $HOME/projects/UrhoApp_build

  Linux_MinGW:
    runs-on: ubuntu-22.04
    needs: init
    if: needs.init.outputs.skip == '0'

    strategy:
      fail-fast: false
      matrix:
        BITS:
        - 64
        LIB_TYPE:
        - {
            ID: shared,
            VALUE: SHARED,
          }
        - {
            ID: static,
            VALUE: STATIC,
          }
        BUILD_TYPE:
        - {
            ID: rel,
            VALUE: Release,
          }
        - {
            ID: dbg,
            VALUE: Debug,
          }

    name: üêß-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: { path: engine_repo }

    - name: Install dependencies
      run: sudo apt install mingw-w64

    - name: –°–∫–∞—á–∏–≤–∞–µ–º –∫—ç—à
      uses: actions/cache@v3
      with:
        path: engine_build
        key: linux-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}-${{ github.sha }}
        restore-keys: linux-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    - name: –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if: |
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[clear cache]')) ||
        (github.event_name == 'push' && contains(join(github.event.commits.*.message, ' '), '[clear cache]'))
      run: |
        rm -rf engine_build

    - name: Build
      run: |
        #set -x # Echo commands
        echo "Current dir: $PWD" # $GITHUB_WORKSPACE

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          export MINGW_PREFIX=/usr/bin/i686-w64-mingw32
          BITS64=0
          DX_INC=/usr/i686-w64-mingw32/include
          DX_LIB=/usr/i686-w64-mingw32/lib
        else
          export MINGW_PREFIX=/usr/bin/x86_64-w64-mingw32
          BITS64=1
          DX_INC=/usr/x86_64-w64-mingw32/include
          DX_LIB=/usr/x86_64-w64-mingw32/lib
        fi

        TOOLCHAIN=$GITHUB_WORKSPACE/engine_repo/cmake/Toolchains/MinGW.cmake

        cmake engine_repo -B engine_build -D CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} -D MINGW=1 \
          -D URHO3D_EXTRAS=1 -D URHO3D_OPENGL=1 -D URHO3D_D3D11=1 \
          -D DIRECTX_INC_SEARCH_PATHS=$DX_INC -D DIRECTX_LIB_SEARCH_PATHS=$DX_LIB \
          -D URHO3D_DATABASE_SQLITE=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build engine_build

    - name: Test app
      run: |
        #sudo cmake --build engine_build --target install
        export URHO3D_HOME=$GITHUB_WORKSPACE/engine_build

        cd engine_repo
        rake new
        cd ..

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          export MINGW_PREFIX=/usr/bin/i686-w64-mingw32
          BITS64=0
          DX_INC=/usr/i686-w64-mingw32/include
          DX_LIB=/usr/i686-w64-mingw32/lib
        else
          export MINGW_PREFIX=/usr/bin/x86_64-w64-mingw32
          BITS64=1
          DX_INC=/usr/x86_64-w64-mingw32/include
          DX_LIB=/usr/x86_64-w64-mingw32/lib
        fi

        TOOLCHAIN=$GITHUB_WORKSPACE/engine_repo/cmake/Toolchains/MinGW.cmake

        cmake $HOME/projects/UrhoApp -B $HOME/projects/UrhoApp_build -D CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} -D MINGW=1 \
          -D URHO3D_EXTRAS=1 -D URHO3D_OPENGL=1 -D URHO3D_D3D11=1 \
          -D DIRECTX_INC_SEARCH_PATHS=$DX_INC -D DIRECTX_LIB_SEARCH_PATHS=$DX_LIB \
          -D URHO3D_DATABASE_SQLITE=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build $HOME/projects/UrhoApp_build
