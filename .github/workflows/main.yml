# Copyright (c) 2008-2023 the Urho3D project
# Copyright (c) 2022-2023 the Dviglo project
# License: MIT

name: CI/CD
on:
  push:
  pull_request:
  repository_dispatch: { types: [ 'Warm DBE build cache' ] }
jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.whatchanged.outputs.skip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: What changed
        id: whatchanged
        run: |
          git fetch --deepen=1
          git log --raw --no-merges -1 |grep '^:' >/tmp/whatchanged
          echo "name=skip::$(grep -cqv 'website/' /tmp/whatchanged; echo $?)" >> $GITHUB_OUTPUT

  Windows:
    # Job –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ —Å –Ω–æ–≤–µ–π—à–µ–π –≤–µ—Ä—Å–∏–µ–π Windows
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
    # https://github.com/actions/runner-images
    runs-on: windows-latest

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö –±–∏–ª–¥–æ–≤
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategy
    strategy:
      fail-fast: false
      matrix:
        COMPILER: [vs, mingw]
        LIB_TYPE: [static, shared]
        BUILD_TYPE: [debug, release]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è job
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idname
    name: üî≤-${{ matrix.COMPILER }}-${{ matrix.LIB_TYPE }}-${{ matrix.BUILD_TYPE }}

    steps:
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º MSYS2 –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ MinGW
      # https://github.com/urho3d/urho3D/issues/2887
    - name: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MinGW
      if: matrix.COMPILER == 'mingw'
      # https://www.msys2.org/docs/ci/
      # https://github.com/msys2/setup-msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain

    - name: –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH –ø—É—Ç—å –∫ MinGW
      if: matrix.COMPILER == 'mingw'
      shell: bash
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-system-path
      run: echo "${RUNNER_TEMP}/msys64/mingw64/bin" >> $GITHUB_PATH

    - name: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Å–æ—Ñ—Ç
      shell: bash
      run: |
        choco install --no-progress doxygen.install
        choco install --no-progress graphviz.portable

    - name: –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      # https://github.com/actions/checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        path: repo # –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

    - name: –°–∫–∞—á–∏–≤–∞–µ–º –∫—ç—à
      uses: actions/cache@v3
      with:
        path: build
        key: windows-${{ matrix.COMPILER }}-${{ matrix.LIB_TYPE }}-${{ matrix.BUILD_TYPE }}-${{ github.sha }}
        restore-keys: windows-${{ matrix.COMPILER }}-${{ matrix.LIB_TYPE }}-${{ matrix.BUILD_TYPE }}

      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
    - name: –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if: |
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[clear cache]')) ||
        (github.event_name == 'push' && contains(join(github.event.commits.*.message, ' '), '[clear cache]'))
      shell: bash
      run: |
        rm -rf build

    - name: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
      shell: bash
      run: |
        ARGS=(repo -B build) # –ú–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

        if [ "${{ matrix.COMPILER }}" == "vs" ]
        then
          ARGS+=(-G "Visual Studio 17 2022" -A x64)
        else
          ARGS+=(-G "MinGW Makefiles")
          # –î–ª—è MinGW —Ç–∏–ø —Å–±–æ–∫–∏ –∑–∞–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
          ARGS+=(-D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }})
        fi

        ARGS+=(-D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE }})
        ARGS+=(-D URHO3D_64BIT=1 -D URHO3D_TESTING=1)
        ARGS+=(-D URHO3D_OPENGL=1 -D URHO3D_D3D11=1)

        cmake "${ARGS[@]}"

    - name: –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º
      shell: bash
      run: |
        ARGS=(--build build) # –ú–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

        if [ "${{ matrix.COMPILER }}" == "vs" ]
        then
          # –î–ª—è Visual Studio —Ç–∏–ø —Å–±–æ–∫–∏ –∑–∞–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
          ARGS+=(--config ${{ matrix.BUILD_TYPE }})
        fi

        cmake "${ARGS[@]}"

      # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ –ì–∏—Ç–•–∞–±–∞ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å Direct3D-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
      # –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å OpenGL-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º
      # –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Mesa 3D for Windows
    - name: –ö–∞—á–∞–µ–º Mesa 3D
      shell: bash
      run: |
        # –ö–∞—á–∞–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Mesa 3D
        # https://curl.se/docs/manpage.html
        curl.exe --location --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.2.3/mesa3d-22.2.3-release-msvc.7z
        7z x mesa.7z -omesa
        rm mesa.7z

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω—É–∂–Ω—ã–µ dll –≤ –ø–∞–ø–∫—É bin
        mv mesa/x64/dxil.dll build/bin
        mv mesa/x64/libgallium_wgl.dll build/bin
        mv mesa/x64/libglapi.dll build/bin
        mv mesa/x64/opengl32.dll build/bin

    - name: CTest
      shell: bash {0} # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
      run: |
        ARGS=(--test-dir build --timeout 60) # –ú–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

        if [ "${{ matrix.COMPILER }}" == "vs" ]
        then
          # –î–ª—è Visual Studio –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø —Å–±–æ—Ä–∫–∏ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
          ARGS+=(-C ${{ matrix.BUILD_TYPE }})
        fi

        ctest "${ARGS[@]}"
        EXIT_CODE=$? # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã

        if (( $EXIT_CODE != 0 )) 
        then
          echo "$(cat $APPDATA/urho3d/logs/HelloWorld.log)" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞
          exit $EXIT_CODE
        fi

  Linux_Native:
    runs-on: ubuntu-latest
    needs: init
    if: needs.init.outputs.skip == '0'

    strategy:
      fail-fast: false
      matrix:
        COMPILER:
        - {
            ID: gcc,
            C: gcc,
            CXX: g++,
          }
        - {
            ID: clang,
            C: clang,
            CXX: clang++,
          }
        BITS:
        - 64
        LIB_TYPE:
        - {
            ID: shared,
            VALUE: SHARED,
          }
        - {
            ID: static,
            VALUE: STATIC,
          }
        BUILD_TYPE:
        - {
            ID: rel,
            VALUE: Release,
          }
        - {
            ID: dbg,
            VALUE: Debug,
          }

    name: üêß-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: { path: "engine_repo" }

    - name: Install dependencies
      run: |
        if [ "${{ matrix.BITS }}" == "32" ]; then
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install gcc-multilib g++-multilib libxext-dev:i386 libgl1-mesa-dev:i386
        else
          sudo apt update
          sudo apt install libgl1-mesa-dev
        fi

        # Ubuntu repository contains obsolete Doxygen 1.9.1. Download own build
        mkdir $HOME/programs
        cd $HOME/programs
        wget -q -O tmp.zip https://github.com/rurho3d/doxygen-builder/raw/main/doxygen_linux64.zip && unzip tmp.zip && rm tmp.zip
        echo "$HOME/programs" >> $GITHUB_PATH

    - name: –°–∫–∞—á–∏–≤–∞–µ–º –∫—ç—à
      uses: actions/cache@v3
      with:
        path: engine_build
        key: linux-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}-${{ github.sha }}
        restore-keys: linux-${{ matrix.COMPILER.ID }}-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
      # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
    - name: –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if: |
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[clear cache]')) ||
        (github.event_name == 'push' && contains(join(github.event.commits.*.message, ' '), '[clear cache]'))
      run: |
        rm -rf engine_build

    - name: Build
      run: |
        #set -x # Echo commands
        echo "Current dir: $PWD"

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          BITS64=0
        else
          BITS64=1
        fi

        cmake engine_repo -B engine_build -G "Unix Makefiles" \
          -D CMAKE_C_COMPILER=${{ matrix.COMPILER.C }} -D CMAKE_CXX_COMPILER=${{ matrix.COMPILER.CXX }} \
          -D URHO3D_DATABASE_SQLITE=1 -D URHO3D_TESTING=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build engine_build

    - name: CTest
      shell: bash {0} # Allow catching errors
      run: |
        xvfb-run ctest --test-dir engine_build
        EXIT_CODE=$? # Exit code of the previous command

        if (( $EXIT_CODE != 0 )) 
        then
          echo "$(cat ~/.local/share/urho3d/logs/HelloWorld.log)"
          exit $EXIT_CODE
        fi

    - name: Test tools
      run: $GITHUB_WORKSPACE/engine_repo/script/test_tools.sh $GITHUB_WORKSPACE/engine_repo $GITHUB_WORKSPACE/engine_build

    - name: Test app
      if: false
      run: |
        #cmake --install engine_build --prefix=$HOME/installed_engine # Not works
        #URHO3D_HOME=$HOME/installed_engine # Not works (add export?)
        #URHO3D_HOME=$GITHUB_WORKSPACE/engine_build # Not works
        sudo cmake --build engine_build --target install
        cd engine_repo
        rake new
        cd ..

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          BITS64=0
        else
          BITS64=1
        fi

        cmake $HOME/projects/UrhoApp -B $HOME/projects/UrhoApp_build -G "Unix Makefiles" \
          -D CMAKE_C_COMPILER=${{ matrix.COMPILER.C }} -D CMAKE_CXX_COMPILER=${{ matrix.COMPILER.CXX }} \
          -D URHO3D_DATABASE_SQLITE=1 -D URHO3D_TESTING=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build $HOME/projects/UrhoApp_build
        xvfb-run ctest --test-dir $HOME/projects/UrhoApp_build

  Linux_MinGW:
    runs-on: ubuntu-22.04
    needs: init
    if: needs.init.outputs.skip == '0'

    strategy:
      fail-fast: false
      matrix:
        BITS:
        - 64
        LIB_TYPE:
        - {
            ID: shared,
            VALUE: SHARED,
          }
        - {
            ID: static,
            VALUE: STATIC,
          }
        BUILD_TYPE:
        - {
            ID: rel,
            VALUE: Release,
          }
        - {
            ID: dbg,
            VALUE: Debug,
          }

    name: üêß-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: { path: engine_repo }

    - name: Install dependencies
      run: sudo apt install mingw-w64

    - name: –°–∫–∞—á–∏–≤–∞–µ–º –∫—ç—à
      uses: actions/cache@v3
      with:
        path: engine_build
        key: linux-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}-${{ github.sha }}
        restore-keys: linux-mingw-${{ matrix.BITS }}-${{ matrix.LIB_TYPE.ID }}-${{ matrix.BUILD_TYPE.ID }}

    - name: –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if: |
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[clear cache]')) ||
        (github.event_name == 'push' && contains(join(github.event.commits.*.message, ' '), '[clear cache]'))
      run: |
        rm -rf engine_build

    - name: Build
      run: |
        #set -x # Echo commands
        echo "Current dir: $PWD" # $GITHUB_WORKSPACE

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          export MINGW_PREFIX=/usr/bin/i686-w64-mingw32
          BITS64=0
          DX_INC=/usr/i686-w64-mingw32/include
          DX_LIB=/usr/i686-w64-mingw32/lib
        else
          export MINGW_PREFIX=/usr/bin/x86_64-w64-mingw32
          BITS64=1
          DX_INC=/usr/x86_64-w64-mingw32/include
          DX_LIB=/usr/x86_64-w64-mingw32/lib
        fi

        TOOLCHAIN=$GITHUB_WORKSPACE/engine_repo/cmake/Toolchains/MinGW.cmake

        cmake engine_repo -B engine_build -D CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} -D MINGW=1 \
          -D URHO3D_EXTRAS=1 -D URHO3D_OPENGL=1 -D URHO3D_D3D11=1 \
          -D DIRECTX_INC_SEARCH_PATHS=$DX_INC -D DIRECTX_LIB_SEARCH_PATHS=$DX_LIB \
          -D URHO3D_DATABASE_SQLITE=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build engine_build

    - name: Test app
      if: false
      run: |
        #sudo cmake --build engine_build --target install
        export URHO3D_HOME=$GITHUB_WORKSPACE/engine_build

        cd engine_repo
        rake new
        cd ..

        if [ "${{ matrix.BITS }}" == "32" ]
        then
          export MINGW_PREFIX=/usr/bin/i686-w64-mingw32
          BITS64=0
          DX_INC=/usr/i686-w64-mingw32/include
          DX_LIB=/usr/i686-w64-mingw32/lib
        else
          export MINGW_PREFIX=/usr/bin/x86_64-w64-mingw32
          BITS64=1
          DX_INC=/usr/x86_64-w64-mingw32/include
          DX_LIB=/usr/x86_64-w64-mingw32/lib
        fi

        TOOLCHAIN=$GITHUB_WORKSPACE/engine_repo/cmake/Toolchains/MinGW.cmake

        cmake $HOME/projects/UrhoApp -B $HOME/projects/UrhoApp_build -D CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} -D MINGW=1 \
          -D URHO3D_EXTRAS=1 -D URHO3D_OPENGL=1 -D URHO3D_D3D11=1 \
          -D DIRECTX_INC_SEARCH_PATHS=$DX_INC -D DIRECTX_LIB_SEARCH_PATHS=$DX_LIB \
          -D URHO3D_DATABASE_SQLITE=1 -D CMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE.VALUE }} \
          -D URHO3D_64BIT=$BITS64 -D URHO3D_LIB_TYPE=${{ matrix.LIB_TYPE.VALUE }}

        cmake --build $HOME/projects/UrhoApp_build
